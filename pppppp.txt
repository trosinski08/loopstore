Jasne, oto plan implementacji płatności Stripe, a następnie kolejne kroki zgodnie z plan_update.md.

### Plan Implementacji Płatności Stripe

Integracja Stripe obejmuje zarówno backend (Django), jak i frontend (Next.js).

**Kroki po stronie Backendu (Django):**

1.  **Instalacja biblioteki Stripe:**
    *   Dodaj `stripe` do pliku `requirements.txt`.
    *   Zainstaluj: `pip install stripe`
2.  **Konfiguracja kluczy API Stripe:**
    *   Dodaj `STRIPE_PUBLISHABLE_KEY` i `STRIPE_SECRET_KEY` do zmiennych środowiskowych i ustawień Django (np. `settings/production.py` i `settings/development.py`).
    *   Pamiętaj, aby używać kluczy testowych podczas developmentu.
3.  **Utworzenie endpointu API do tworzenia `PaymentIntent`:**
    *   Stwórz nowy widok i URL (np. `/api/create-payment-intent/`) w Django REST Framework.
    *   Endpoint ten powinien przyjmować kwotę zamówienia (i ewentualnie walutę oraz ID zamówienia).
    *   Użyj `stripe.PaymentIntent.create()` do stworzenia intencji płatności.
    *   Zwróć `client_secret` z obiektu `PaymentIntent` do frontendu.
4.  **Utworzenie endpointu webhooka dla Stripe:**
    *   Stwórz endpoint (np. `/api/stripe-webhook/`) do nasłuchiwania na zdarzenia od Stripe (np. `payment_intent.succeeded`, `payment_intent.payment_failed`, `charge.succeeded`).
    *   **Zabezpiecz webhook:** Weryfikuj sygnaturę webhooka Stripe, aby upewnić się, że żądania pochodzą od Stripe. Użyj `STRIPE_WEBHOOK_SECRET`.
    *   Aktualizuj status zamówienia w bazie danych na podstawie otrzymanych zdarzeń (np. oznacz zamówienie jako opłacone).
5.  **Aktualizacja modelu `Order`:**
    *   Dodaj pola do przechowywania ID `PaymentIntent` Stripe oraz statusu płatności.

**Kroki po stronie Frontendu (Next.js):**

1.  **Instalacja bibliotek Stripe:**
    *   Użyj `npm install @stripe/react-stripe-js @stripe/stripe-js` lub `yarn add @stripe/react-stripe-js @stripe/stripe-js`.
2.  **Konfiguracja Stripe.js:**
    *   W komponencie strony checkout (page.tsx lub dedykowanym komponencie płatności), załaduj Stripe.js używając `loadStripe` z `@stripe/stripe-js` i Twojego klucza publicznego (`STRIPE_PUBLISHABLE_KEY`).
    *   Owiń formularz płatności komponentem `<Elements>` od `@stripe/react-stripe-js`.
3.  **Implementacja formularza płatności:**
    *   Użyj komponentów Stripe Elements (np. `CardElement` lub nowszych `PaymentElement`) do bezpiecznego zbierania danych karty.
    *   Dodaj pola formularza do zbierania danych rozliczeniowych, jeśli są wymagane.
4.  **Obsługa procesu płatności:**
    *   Przy submisji formularza:
        *   Wywołaj backendowy endpoint `/api/create-payment-intent/`, aby uzyskać `client_secret`.
        *   Użyj funkcji `stripe.confirmCardPayment(clientSecret, { payment_method: { card: elements.getElement(CardElement) } })` (lub odpowiednika dla `PaymentElement`) do przetworzenia płatności.
        *   Obsłuż odpowiedź:
            *   **Sukces:** Przekieruj użytkownika na stronę potwierdzenia zamówienia. Zaktualizuj stan koszyka.
            *   **Błąd:** Wyświetl odpowiedni komunikat błędu użytkownikowi.
5.  **Interfejs użytkownika:**
    *   Zapewnij jasne komunikaty o statusie płatności, ładowaniu i błędach.

**Testowanie:**

*   Dokładnie przetestuj cały proces w trybie testowym Stripe, używając testowych numerów kart.
*   Przetestuj obsługę błędów i różne scenariusze płatności.
*   Sprawdź działanie webhooków.

---

### Kolejne Kroki z plan_update.md (poza integracją płatności)

Zakładając, że integracja płatności jest częścią "Etapu 3: Enhanced Features", następnym dużym etapem jest:

**Etap 4: Optymalizacja i Skalowalność (Tydzień 11-12)**

1.  **Wdrożenie hostingu (Deployment):**
    *   **Frontend:** Przygotowanie do wdrożenia na platformie takiej jak Vercel, Netlify lub na serwerze w DigitalOcean/Azure (zgodnie z wybranymi narzędziami).
        *   Konfiguracja zmiennych środowiskowych dla produkcji.
        *   Optymalizacja builda Next.js (`next build`).
    *   **Backend:** Przygotowanie do wdrożenia na Heroku, DigitalOcean (np. App Platform, Kubernetes) lub Azure.
        *   Upewnienie się, że Dockerfile jest gotowy na produkcję (np. użycie Gunicorn/Uvicorn, odpowiednie ustawienia).
        *   Konfiguracja produkcyjnej bazy danych (np. Managed Database w DigitalOcean).
        *   Migracje bazy danych w środowisku produkcyjnym.
        *   Konfiguracja serwera Nginx (jeśli jest używany jako reverse proxy przed backendem/frontendem).
    *   **CI/CD:** Rozbudowa istniejących GitHub Actions o kroki deploymentu na środowiska staging/produkcyjne.
2.  **Monitoring:**
    *   **DataDog:**
        *   Konfiguracja agenta DataDog w kontenerach/na serwerach produkcyjnych.
        *   Integracja APM (Application Performance Monitoring) z aplikacją Django i Next.js.
        *   Konfiguracja zbierania logów.
    *   **Sentry:**
        *   Integracja Sentry SDK w Next.js i Django do śledzenia błędów i wydajności.
        *   Konfiguracja source maps dla lepszego debugowania błędów frontendu.
    *   **Logowanie:** Upewnienie się, że logi aplikacji są odpowiednio zbierane, przechowywane i dostępne do analizy w środowisku produkcyjnym.
3.  **SEO i Optymalizacja Wydajności:**
    *   **SEO:**
        *   Weryfikacja i uzupełnienie meta tagów, danych strukturalnych (Schema.org).
        *   Generowanie i zgłaszanie `sitemap.xml`.
        *   Konfiguracja `robots.txt`.
    *   **CDN:** Integracja z Azure CDN (lub innym wybranym) dla zasobów statycznych frontendu i mediów backendu.
    *   **Optymalizacja Kodu:**
        *   Analiza wielkości paczek frontendu (bundle analysis).
        *   Code splitting (Next.js robi to w dużej mierze automatycznie, ale można zoptymalizować).
        *   Lazy loading dla obrazów i komponentów.
    *   **Cache:**
        *   Implementacja strategii cache'owania po stronie serwera (np. Redis dla Django).
        *   Konfiguracja cache'owania HTTP (nagłówki Cache-Control, ETag) przez Nginx lub aplikację.
        *   Wykorzystanie możliwości cache'owania Next.js (ISR, SSG, jeśli dotyczy).

Zacznij od implementacji płatności Stripe. Gdy to będzie gotowe i przetestowane, możesz przejść do zadań z Etapu 4. Daj znać, jeśli potrzebujesz bardziej szczegółowego rozwinięcia któregoś z tych punktów!