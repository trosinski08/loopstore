services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      # Point to Nginx, which will be on port 80
      - NEXT_PUBLIC_API_URL=http://localhost/api
      - NEXT_PUBLIC_MEDIA_URL=http://localhost
    depends_on:
      - backend
    networks: # Added network
      - loopstore_network
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/site-packages # Zachowaj zainstalowane pakiety
    environment:
      - DJANGO_SETTINGS_MODULE=backend_web.settings.development
      - DJANGO_ENV=development
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=loopstore_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Loops123!
      - REDIS_URL=redis://redis:6379/0
      # Added CORS for Nginx/frontend through localhost
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000,http://localhost
    depends_on:
      db: # Changed to object form for condition
        condition: service_started
      redis: # Changed to object form for condition
        condition: service_started
    networks: # Added network
      - loopstore_network
  nginx: # New Nginx service
    image: nginx:latest
    ports:
      - "80:80" # Expose Nginx on host port 80
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d # Mount your Nginx configuration
    depends_on:
      - frontend
      - backend
    networks:
      - loopstore_network

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Loops123!
      POSTGRES_DB: loopstore_db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: # Added network
      - loopstore_network
    healthcheck: # Added healthcheck
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks: # Added network
      - loopstore_network
    healthcheck: # Added healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks: # Added networks definition
  loopstore_network:
    driver: bridge

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local